'use client';
import prisma from '@/lib/prisma'
import { useEffect, useState } from 'react';
import { ITEMS, Item } from '@/app/data/items';
import { Purchase, CurrentPurchaseWithSecret, WithdrawInfo } from '@/app/types';
import { WebApp } from '@twa-dev/types';

// Import components
import LoadingState from '@/app/components/LoadingState';
import ErrorState from '@/app/components/ErrorState';
import ItemsList from '@/app/components/ItemsList';
import PurchaseHistory from '@/app/components/PurchaseHistory';
import PurchaseSuccessModal from '@/app/components/PurchaseSuccessModal';
import WithdrawalInstructionsModal from '@/app/components/WithdrawalInstructionsModal';



   
  const [user, setUser] = useState<any>(null)
  const [notification, setNotification] = useState('')
  const [activeTab, setActiveTab] = useState(1);
  const [initialized, setInitialized] = useState(false);
  const [userId, setUserId] = useState<string>('');
  const [purchases, setPurchases] = useState<Purchase[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [modalState, setModalState] = useState<{
    type: 'purchase' | 'withdraw' | null;
    purchase?: CurrentPurchaseWithSecret;
  }>({ type: null });

  const user = await prisma.Purchases.findUnique({
    where: { id: userId },
    select: { telegramiddb: true, balancedb: true }});

  
  export default function Home() {
  
  

useEffect(() => {
    // Import TWA SDK dynamically to avoid SSR issues
    const initTelegram = async () => {
try {
        // Dynamic import of the TWA SDK
        const WebApp = (await import('@twa-dev/sdk')).default;
        
        // Check if running within Telegram
        const isTelegram = WebApp.isExpanded !== undefined;
        
        if (isTelegram) {
          // Initialize Telegram Web App
          WebApp.ready();
          WebApp.expand();
        }}}}
      
//-----======

        // Dynamic import of the TWA SDK
        if (WebApp.initDataUnsafe && WebApp.initDataUnsafe.user) {
        fetch('/api/user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(WebApp.initDataUnsafe.user),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data.error) {
              setError(data.error)
            } else {
              setUser(data)
            }
          })
//------------
try {
        // Dynamic import of the TWA SDK
        const WebApp = (await import('@twa-dev/sdk')).default;
// Get user ID from initData
          if (WebApp.initDataUnsafe && WebApp.initDataUnsafe.user) {

//---------            
            // Access user data directly from the WebApp object
            const user = WebApp.initDataUnsafe.user;
            setUserId(user.id?.toString() || '');
          } else {
            setError('No user data available from Telegram');
            setIsLoading(false);
          }
        }
          catch (e) {
          setError('This application can only be accessed from within Telegram');
          setIsLoading(false);
        }

        setInitialized(true);

    
        try {
  // risky code
} catch (err) {
  console.error('Failed to initialize Telegram Web App');
        setInitialized(true);
        setIsLoading(false);
}
        

    

    initTelegram();
  }} [];

// ---telegram Useseffect end here

//=======increase point useeffect code start===========
const handleIncreasePoints = async () => {
    if (!user) return

    try {
      const res = await fetch('/api/increase-points', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId: user.telegramId }),
      })
      const data = await res.json()
      if (data.success) {
        setUser({ ...user, points: data.points })
        setNotification('Points increased successfully!')
        setTimeout(() => setNotification(''), 3000)
      } else {
        setError('Failed to increase points')
      }
    } catch (err) {
      setError('An error occurred while increasing points')
    }
  }

  if (error) {
    return <div className="container mx-auto p-4 text-red-500">{error}</div>
  }

  if (!user) return <div className="container mx-auto p-4">Loading...</div>

//==========Star payment useeffect start

  // Fetch purchase history
  useEffect(() => {
    if (initialized && userId) {
      fetchPurchases();
    }
  }, [initialized, userId]);

  const fetchPurchases = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/purchases?userId=${userId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch purchases');
      }
      
      const data = await response.json();
      setPurchases(data.purchases || []);
    } catch (e) {
      console.error('Error fetching purchases:', e);
      setError('Failed to load purchase history');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePurchase = async (item: Item) => {
    try {
      setIsLoading(true); // Show loading indicator when starting purchase
      // Create invoice link through our API
      const response = await fetch('/api/create-invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          itemId: item.id,
          userId
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to create invoice');
      }

      const { invoiceLink } = await response.json();
      setIsLoading(false); // Hide loading before opening the invoice UI

      // Import TWA SDK
      const WebApp = (await import('@twa-dev/sdk')).default;
     
      

// Dispoalying Transction II
export default async function HomePage() {
  // Replace with real user ID
  const userId = 'userid_db'

  const user = await prisma.Purchases.findUnique({
    where: {


      // Open the invoice using Telegram's WebApp SDK
      WebApp.openInvoice(invoiceLink, async (status) => {
        if (status === 'paid') {
          setIsLoading(true); // Show loading during processing after payment
          // Payment was successful
          // Generate a mock transaction ID since we don't have access to the real one from Telegram
          // In a production app, this would be retrieved from your backend after the bot
          // receives the pre_checkout_query and successful_payment updates
          const transactionId = `transactioniddb`
  if (!user) {
    return <p>User not found</p>
  };
          
          try {
            // Store the successful payment and get the secret code
            const paymentResponse = await fetch('/api/payment-success', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                userId,
                itemId: item.id,
                transactionId
              })
            });

            if (!paymentResponse.ok) {
              throw new Error('Failed to record payment');
            }

            const { secret } = await paymentResponse.json();
            
            // Show the success modal with secret code
            setModalState({
              type: 'purchase',
              purchase: {
                itemid,
                transactionId,
                timestamp: Date.now(),
                secret,
                balance,
              }
            });
            
            // Refresh purchases list
            await fetchPurchases();
          } catch (e) {
            console.error('Error saving payment:', e);
            alert('Your payment was successful, but we had trouble saving your purchase. Please contact support.');
            setIsLoading(false); // Ensure loading is turned off after error
          }
        } else if (status === 'failed') {
          alert('Payment failed. Please try again.');
        } else if (status === 'cancelled') {
          // User cancelled the payment, no action needed
          console.log('Payment was cancelled by user');
        }
      });
    } catch (e) {
      console.error('Error during purchase:', e);
      alert(`Failed to process purchase: ${e instanceof Error ? e.message : 'Unknown error'}`);
      setIsLoading(false); // Ensure loading is turned off after error
    }
  };

  // Function to reveal secret for past purchases
  const revealSecret = async (purchase: Purchase) => {
    
    try {

      // Fetch the secret from the server for this purchase
      setIsLoading(true);
      const response = await fetch(`/api/get-secret?itemid=${purchase.itemid}&transactionid=${purchase.transactionid}`);
      
      if (!response.ok) {
        throw new Error('Failed to retrieve secret code');
      }
      
      const { secret } = await response.json();
      const item = ITEMS.find(i => i.id === purchase.itemid);
      
      if (item) {
        setModalState({
          type: 'purchase',
          purchase: {
            item,
            transactionId: purchase.transactionid,
            timestamp: purchase.timestamp,
            secret
          }
        });
      }
      try {
  // risky code
} catch (err) {
  console.error('Error fetching secret:',);
      alert('Unable to retrieve the secret code. Please try again.');
    } finally {
      setIsLoading(false);
    }
    }
finally {
      setIsLoading(false);
    }
  };

   // Function to reveal withdrawal for past purchases
  const PurchaseHistoryProps = async (transactionId: string) => {
    try {
  console.log("Doing something risky...");
} catch (error) {
  console.error("Something went wrong:", error);
}
     // Redirect users to the bot for withdwrawals
  const handleWithdraw = (purchase: CurrentPurchaseWithSecret) => {
  setModalState({
    type: 'withdraw',
    purchase
  });
};

  
  // Handle retry on error
  const handleRetry = () => {
    window.location.reload();
  };

  // Close modals
  const handleCloseModal = () => {
    setModalState({ type: null });
  };

  // Loading state
  if (!initialized || isLoading) {
    return <LoadingState />;
  }

  // Error state (including not in Telegram)
  if (error) {
    return <ErrorState error={error} onRetry={handleRetry} />;
  }
             
    

  // Main app UI
  return (
 <div className="container mx-auto p-4">
      <div className="pb-20">
        {activeTab === 1 && (
      <>
      <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Welcome, {user.firstName}!</h1>
      <p>Your current points: {user.points}</p>
      
      <button onClick={handleIncreasePoints}
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-4"
      >     Increase Points
      </button>
      
    

      {notification && (
        <div className="mt-4 p-2 bg-green-100 text-green-700 rounded">
          {notification}
        </div>
      )}
    </div>
  

      
  
    <div className="max-w-md mx-auto p-4 pb-20">
      {modalState.type === 'purchase' && modalState.purchase && modalState.purchase.item && (
        <PurchaseSuccessModal
          currentPurchase={modalState.purchase}
          onClose={handleCloseModal}
        />
      )}
      
      {modalState.type === 'withdraw' && (
        <WithdrawalInstructionsModal
          onClose={handleCloseModal}
        />
      )}    
      <h2 className="text-2xl font-bold mb-6 text-center">Sell Stars</h2>
      
      <ItemsList 
        items={ITEMS}
        onPurchase={handlePurchase}
      />
      
      <PurchaseHistory
        purchases={purchases}
        items={ITEMS}
        onViewSecret={revealSecret}
        onWithdraw={PurchaseHistoryProps}  
        />
            </div>       

            <div className="mt-12 pb-6 text-center">
              <p className="text-xs text-gray-400">
                Made with <span className="text-red-500">❤️</span> for SamPidia.
              </p>
            </div>
          </>
        )}
        
        {activeTab === 2 && (
          <>
          <div className="w-full" style={{height:'calc(100vh - 72px)'}}>
            <iframe 
              src="https://sampidia.com" 
              title="Tab 2" 
              className="w-full h-full border-none" 
            />
          </div>
          </>
        )}

        {activeTab === 3 && (
          <div className="w-full" style={{height:'calc(100vh - 72px)'}}>
            <iframe 
              src="https://connect.sampidia.com" 
              title="Tab 3" 
              className="w-full h-full border-none" 
            />
          </div>
        )}

        {activeTab === 4 && (
          <div className="w-full" style={{height:'calc(100vh - 72px)'}}>
            <iframe 
              src="https://ai.sampidia.com" 
              title="Tab 4" 
              className="w-full h-full border-none" 
            />
          </div>
        )}
      </div>
      

      <div className="fixed bottom-0 left-0 right-0 flex justify-center items-center z-50" style={{maxWidth:'500px',margin:'0 auto'}}>
        <div className="flex w-full mx-4 my-2 bg-white rounded-full shadow-lg px-2 py-2" style={{gap:'8px'}}>
          
          <button
            onClick={() => setActiveTab(1)}
            className={`flex-1 flex justify-center items-center transition-all ${activeTab===1?'bg-gray-100 rounded-full':''}`}
            style={{height:'48px'}}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke={activeTab===1?"#222":"#888"} className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
            </svg>
          </button>

          <button
            onClick={() => setActiveTab(2)}
            className={`flex-1 flex justify-center items-center transition-all ${activeTab===2?'bg-gray-100 rounded-full':''}`}
            style={{height:'48px'}}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke={activeTab===2?"#222":"#888"} className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 0 1-2.25 2.25M16.5 7.5V18a2.25 2.25 0 0 0 2.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 0 0 2.25 2.25h13.5M6 7.5h3v3H6v-3Z" />
            </svg>
          </button>

          <button
            onClick={() => setActiveTab(3)}
            className={`flex-1 flex justify-center items-center transition-all ${activeTab===3?'bg-gray-100 rounded-full':''}`}
            style={{height:'48px'}}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke={activeTab===3?"#222":"#888"} className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 0 1-.825-.242m9.345-8.334a2.126 2.126 0 0 0-.476-.095 48.64 48.64 0 0 0-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0 0 11.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155" />
            </svg>
          </button>

          <button
            onClick={() => setActiveTab(4)}
            className={`flex-1 flex justify-center items-center transition-all ${activeTab===4?'bg-gray-100 rounded-full':''}`}
            style={{height:'48px'}}
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke={activeTab===4?"#222":"#888"} className="size-6">
              <path strokeLinecap="round" strokeLinejoin="round" d="m6.75 7.5 3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0 0 21 18V6a2.25 2.25 0 0 0-2.25-2.25H5.25A2.25 2.25 0 0 0 3 6v12a2.25 2.25 0 0 0 2.25 2.25Z" />
            </svg>
          </button>
        </div>
      </div>
    </div> 
  );