import { prisma } from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';
import { getSecretForItem } from '@/app/server/item-secrets';

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { userId, itemId, transactionId } = body;

    if (!userId || !itemId || !transactionId) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    // In a real application, you would verify the payment with Telegram
    // before storing it as successful

    // Get the secret code for this item
    const secret = getSecretForItem(itemId);
    
    if (!secret) {
      return NextResponse.json({ error: 'Secret not found for this item' }, { status: 404 });
    }

    // Store the purchase in database using Prisma
    try {
      const purchase = await prisma.purchases.create({
        data: {
          useriddb: userId,
          itemiddb: itemId,           // Fixed: was itemdiddb
          timestampdb: new Date(),    // Fixed: using proper Date object instead of Date.now()
          transactioniddb: transactionId,
          secretdb: secret,           // Store the secret in database
        }
      });

      console.log('Purchase created successfully:', purchase.id);

      // Return the secret to the client
      return NextResponse.json({ success: true, secret });

    } catch (dbError) {
      console.error('Database error:', dbError);
      return NextResponse.json({ error: 'Failed to store purchase in database' }, { status: 500 });
    }

  } catch (error) {
    console.error('Error storing successful payment:', error);
    return NextResponse.json({ error: 'Failed to store payment data' }, { status: 500 });
  } finally {
    // Ensure Prisma client is disconnected properly
    await prisma.$disconnect();
  }
}